module Evergreen.Migrate.V26 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Dict
import Evergreen.V1.Bridge
import Evergreen.V1.Layouts.Default
import Evergreen.V1.Main
import Evergreen.V1.Main.Layouts.Model
import Evergreen.V1.Main.Pages.Model
import Evergreen.V1.Pages.Admin
import Evergreen.V1.Pages.Fate
import Evergreen.V1.Pages.Fate.Id_
import Evergreen.V1.Pages.Home_
import Evergreen.V1.Pages.NotFound_
import Evergreen.V1.Pages.Wanderhome
import Evergreen.V1.Pages.Wanderhome.Id_
import Evergreen.V1.Route
import Evergreen.V1.Route.Path
import Evergreen.V1.Shared
import Evergreen.V1.Shared.Model
import Evergreen.V1.Types
import Evergreen.V1.Types.EmailData
import Evergreen.V1.Types.Fate
import Evergreen.V1.Types.GameId
import Evergreen.V1.Types.GameIdDict
import Evergreen.V1.Types.ServerData
import Evergreen.V1.Types.Session
import Evergreen.V1.Types.SessionDict
import Evergreen.V1.Types.Token
import Evergreen.V1.Types.TokenDict
import Evergreen.V1.Types.UserId
import Evergreen.V1.Types.UserIdDict
import Evergreen.V1.Types.Wanderhome
import Evergreen.V26.Bridge
import Evergreen.V26.Layouts.Default
import Evergreen.V26.Main
import Evergreen.V26.Main.Layouts.Model
import Evergreen.V26.Main.Pages.Model
import Evergreen.V26.Pages.Admin
import Evergreen.V26.Pages.Fate
import Evergreen.V26.Pages.Fate.Id_
import Evergreen.V26.Pages.Home_
import Evergreen.V26.Pages.NotFound_
import Evergreen.V26.Pages.Wanderhome
import Evergreen.V26.Pages.Wanderhome.Id_
import Evergreen.V26.Route
import Evergreen.V26.Route.Path
import Evergreen.V26.Shared
import Evergreen.V26.Shared.Model
import Evergreen.V26.Types
import Evergreen.V26.Types.EmailData
import Evergreen.V26.Types.Fate
import Evergreen.V26.Types.GameId
import Evergreen.V26.Types.GameIdDict
import Evergreen.V26.Types.ServerData
import Evergreen.V26.Types.Session
import Evergreen.V26.Types.SessionDict
import Evergreen.V26.Types.Token
import Evergreen.V26.Types.TokenDict
import Evergreen.V26.Types.UserId
import Evergreen.V26.Types.UserIdDict
import Evergreen.V26.Types.UserIdSet
import Evergreen.V26.Types.Wanderhome
import Lamdera.Migrations exposing (..)
import List
import Maybe


frontendModel : Evergreen.V1.Types.FrontendModel -> ModelMigration Evergreen.V26.Types.FrontendModel Evergreen.V26.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V1.Types.BackendModel -> ModelMigration Evergreen.V26.Types.BackendModel Evergreen.V26.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V1.Types.FrontendMsg -> MsgMigration Evergreen.V26.Types.FrontendMsg Evergreen.V26.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V1.Types.ToBackend -> MsgMigration Evergreen.V26.Types.ToBackend Evergreen.V26.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V1.Types.BackendMsg -> MsgMigration Evergreen.V26.Types.BackendMsg Evergreen.V26.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V1.Types.ToFrontend -> MsgMigration Evergreen.V26.Types.ToFrontend Evergreen.V26.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_BackendModel : Evergreen.V1.Types.BackendModel -> Evergreen.V26.Types.BackendModel
migrate_Types_BackendModel old =
    { seed = old.seed
    , sessions = old.sessions |> migrate_Types_SessionDict_SessionDict
    , errors = old.errors
    , emails = old.emails |> List.map migrate_Types_EmailData_EmailData
    }


migrate_Types_FrontendModel : Evergreen.V1.Types.FrontendModel -> Evergreen.V26.Types.FrontendModel
migrate_Types_FrontendModel old =
    old |> migrate_Main_Model


migrate_Types_ToFrontend : Evergreen.V1.Types.ToFrontend -> Evergreen.V26.Types.ToFrontend
migrate_Types_ToFrontend old =
    old |> migrate_Bridge_ToFrontend


migrate_Bridge_AdminPageData : Evergreen.V1.Bridge.AdminPageData -> Evergreen.V26.Bridge.AdminPageData
migrate_Bridge_AdminPageData old =
    { sessions = old.sessions |> migrate_Types_SessionDict_SessionDict
    , errors = old.errors
    , emails = old.emails |> List.map migrate_Types_EmailData_EmailData
    }


migrate_Bridge_ToFrontend : Evergreen.V1.Bridge.ToFrontend -> Evergreen.V26.Bridge.ToFrontend
migrate_Bridge_ToFrontend old =
    case old of
        Evergreen.V1.Bridge.TFPage p0 ->
            Evergreen.V26.Bridge.TFPage (p0 |> migrate_Bridge_ToFrontendPage)

        Evergreen.V1.Bridge.TFPing ->
            Evergreen.V26.Bridge.TFPing

        Evergreen.V1.Bridge.TFCheckedLogin p0 ->
            Evergreen.V26.Bridge.TFCheckedLogin (p0 |> Maybe.map migrate_Shared_Model_User)

        Evergreen.V1.Bridge.TFInvalidEmail ->
            Evergreen.V26.Bridge.TFInvalidEmail

        Evergreen.V1.Bridge.TFEmailSent ->
            Evergreen.V26.Bridge.TFEmailSent

        Evergreen.V1.Bridge.TFEmailError ->
            Evergreen.V26.Bridge.TFEmailError


migrate_Bridge_ToFrontendPage : Evergreen.V1.Bridge.ToFrontendPage -> Evergreen.V26.Bridge.ToFrontendPage
migrate_Bridge_ToFrontendPage old =
    case old of
        Evergreen.V1.Bridge.TFAdminPageData p0 ->
            Evergreen.V26.Bridge.TFAdminPageData (p0 |> migrate_Bridge_AdminPageData)

        Evergreen.V1.Bridge.TFLoadedFateCharacters p0 ->
            Evergreen.V26.Bridge.TFLoadedFateCharacters p0


migrate_Layouts_Default_Model : Evergreen.V1.Layouts.Default.Model -> Evergreen.V26.Layouts.Default.Model
migrate_Layouts_Default_Model old =
    old


migrate_Main_Layouts_Model_Model : Evergreen.V1.Main.Layouts.Model.Model -> Evergreen.V26.Main.Layouts.Model.Model
migrate_Main_Layouts_Model_Model old =
    case old of
        Evergreen.V1.Main.Layouts.Model.Default p0 ->
            Evergreen.V26.Main.Layouts.Model.Default
                { default = p0.default |> migrate_Layouts_Default_Model
                }


migrate_Main_Model : Evergreen.V1.Main.Model -> Evergreen.V26.Main.Model
migrate_Main_Model old =
    { key = old.key
    , url = old.url
    , page = old.page |> migrate_Main_Pages_Model_Model
    , layout = old.layout |> Maybe.map migrate_Main_Layouts_Model_Model
    , shared = old.shared |> migrate_Shared_Model
    }


migrate_Main_Pages_Model_Model : Evergreen.V1.Main.Pages.Model.Model -> Evergreen.V26.Main.Pages.Model.Model
migrate_Main_Pages_Model_Model old =
    case old of
        Evergreen.V1.Main.Pages.Model.Home_ p0 ->
            Evergreen.V26.Main.Pages.Model.Home_ (p0 |> migrate_Pages_Home__Model)

        Evergreen.V1.Main.Pages.Model.Admin p0 ->
            Evergreen.V26.Main.Pages.Model.Admin (p0 |> migrate_Pages_Admin_Model)

        Evergreen.V1.Main.Pages.Model.Fate p0 ->
            Evergreen.V26.Main.Pages.Model.Fate (p0 |> migrate_Pages_Fate_Model)

        Evergreen.V1.Main.Pages.Model.Fate_Id_ p0 p1 ->
            Evergreen.V26.Main.Pages.Model.Fate_Id_ p0 (p1 |> migrate_Pages_Fate_Id__Model)

        Evergreen.V1.Main.Pages.Model.Wanderhome p0 ->
            Evergreen.V26.Main.Pages.Model.Wanderhome (p0 |> migrate_Pages_Wanderhome_Model)

        Evergreen.V1.Main.Pages.Model.Wanderhome_Id_ p0 p1 ->
            Evergreen.V26.Main.Pages.Model.Wanderhome_Id_ p0 (p1 |> migrate_Pages_Wanderhome_Id__Model)

        Evergreen.V1.Main.Pages.Model.NotFound_ p0 ->
            Evergreen.V26.Main.Pages.Model.NotFound_ (p0 |> migrate_Pages_NotFound__Model)

        Evergreen.V1.Main.Pages.Model.Redirecting_ ->
            Evergreen.V26.Main.Pages.Model.Redirecting_

        Evergreen.V1.Main.Pages.Model.Loading_ ->
            Evergreen.V26.Main.Pages.Model.Loading_


migrate_Pages_Admin_Model : Evergreen.V1.Pages.Admin.Model -> Evergreen.V26.Pages.Admin.Model
migrate_Pages_Admin_Model old =
    old |> Maybe.map migrate_Bridge_AdminPageData


migrate_Pages_Fate_Id__Model : Evergreen.V1.Pages.Fate.Id_.Model -> Evergreen.V26.Pages.Fate.Id_.Model
migrate_Pages_Fate_Id__Model old =
    case old of
        Evergreen.V1.Pages.Fate.Id_.Joining ->
            Evergreen.V26.Pages.Fate.Id_.Joining


migrate_Pages_Fate_Model : Evergreen.V1.Pages.Fate.Model -> Evergreen.V26.Pages.Fate.Model
migrate_Pages_Fate_Model old =
    { input = old.input
    , placeholder = old.placeholder
    , characters = old.characters |> migrate_Types_ServerData_ServerData identity
    }


migrate_Pages_Home__Model : Evergreen.V1.Pages.Home_.Model -> Evergreen.V26.Pages.Home_.Model
migrate_Pages_Home__Model old =
    old


migrate_Pages_NotFound__Model : Evergreen.V1.Pages.NotFound_.Model -> Evergreen.V26.Pages.NotFound_.Model
migrate_Pages_NotFound__Model old =
    old


migrate_Pages_Wanderhome_Id__Model : Evergreen.V1.Pages.Wanderhome.Id_.Model -> Evergreen.V26.Pages.Wanderhome.Id_.Model
migrate_Pages_Wanderhome_Id__Model old =
    old


migrate_Pages_Wanderhome_Model : Evergreen.V1.Pages.Wanderhome.Model -> Evergreen.V26.Pages.Wanderhome.Model
migrate_Pages_Wanderhome_Model old =
    old


migrate_Route_Path_Path : Evergreen.V1.Route.Path.Path -> Evergreen.V26.Route.Path.Path
migrate_Route_Path_Path old =
    case old of
        Evergreen.V1.Route.Path.Home_ ->
            Evergreen.V26.Route.Path.Home_

        Evergreen.V1.Route.Path.Admin ->
            Evergreen.V26.Route.Path.Admin

        Evergreen.V1.Route.Path.Fate ->
            Evergreen.V26.Route.Path.Fate

        Evergreen.V1.Route.Path.Fate_Id_ p0 ->
            Evergreen.V26.Route.Path.Fate_Id_ p0

        Evergreen.V1.Route.Path.Wanderhome ->
            Evergreen.V26.Route.Path.Wanderhome

        Evergreen.V1.Route.Path.Wanderhome_Id_ p0 ->
            Evergreen.V26.Route.Path.Wanderhome_Id_ p0

        Evergreen.V1.Route.Path.NotFound_ ->
            Evergreen.V26.Route.Path.NotFound_


migrate_Route_Route : (params_old -> params_new) -> Evergreen.V1.Route.Route params_old -> Evergreen.V26.Route.Route params_new
migrate_Route_Route migrate_params old =
    { path = old.path |> migrate_Route_Path_Path
    , params = old.params |> migrate_params
    , query = old.query
    , hash = old.hash
    , url = old.url
    }


migrate_Shared_Model : Evergreen.V1.Shared.Model -> Evergreen.V26.Shared.Model
migrate_Shared_Model old =
    old |> migrate_Shared_Model_Model


migrate_Shared_Model_LoggedIn : Evergreen.V1.Shared.Model.LoggedIn -> Evergreen.V26.Shared.Model.LoggedIn
migrate_Shared_Model_LoggedIn old =
    case old of
        Evergreen.V1.Shared.Model.Unknown ->
            Evergreen.V26.Shared.Model.Unknown

        Evergreen.V1.Shared.Model.LoggedInAs p0 ->
            Evergreen.V26.Shared.Model.LoggedInAs (p0 |> migrate_Shared_Model_User)

        Evergreen.V1.Shared.Model.NotLoggedIn ->
            Evergreen.V26.Shared.Model.NotLoggedIn

        Evergreen.V1.Shared.Model.InvalidEmail ->
            Evergreen.V26.Shared.Model.InvalidEmail

        Evergreen.V1.Shared.Model.EmailSent ->
            Evergreen.V26.Shared.Model.EmailSent

        Evergreen.V1.Shared.Model.EmailError ->
            Evergreen.V26.Shared.Model.EmailError


migrate_Shared_Model_Model : Evergreen.V1.Shared.Model.Model -> Evergreen.V26.Shared.Model.Model
migrate_Shared_Model_Model old =
    { loggedIn = old.loggedIn |> migrate_Shared_Model_LoggedIn
    }


migrate_Shared_Model_User : Evergreen.V1.Shared.Model.User -> Evergreen.V26.Shared.Model.User
migrate_Shared_Model_User old =
    { userId = old.userId |> migrate_Types_UserId_UserId
    }


migrate_Types_EmailData_EmailData : Evergreen.V1.Types.EmailData.EmailData -> Evergreen.V26.Types.EmailData.EmailData
migrate_Types_EmailData_EmailData old =
    case old of
        Evergreen.V1.Types.EmailData.LoginEmail p0 ->
            Evergreen.V26.Types.EmailData.LoginEmail
                { to = p0.to
                , route = p0.route |> migrate_Route_Route identity
                , token = p0.token |> migrate_Types_Token_Token
                }


migrate_Types_Fate_GameData : Evergreen.V1.Types.Fate.GameData -> Evergreen.V26.Types.Fate.GameData
migrate_Types_Fate_GameData old =
    { userData = old.userData |> migrate_Types_UserIdDict_UserIdDict migrate_Types_Fate_SharedData
    }


migrate_Types_Fate_SharedData : Evergreen.V1.Types.Fate.SharedData -> Evergreen.V26.Types.Fate.SharedData
migrate_Types_Fate_SharedData old =
    old


migrate_Types_Fate_UserData : Evergreen.V1.Types.Fate.UserData -> Evergreen.V26.Types.Fate.UserData
migrate_Types_Fate_UserData old =
    old


migrate_Types_GameIdDict_GameIdDict : (v_old -> v_new) -> Evergreen.V1.Types.GameIdDict.GameIdDict v_old -> Evergreen.V26.Types.GameIdDict.GameIdDict v_new
migrate_Types_GameIdDict_GameIdDict migrate_v old =
    case old of
        Evergreen.V1.Types.GameIdDict.GameIdDict p0 ->
            p0
                |> Dict.map
                    (\_ ( k, v ) -> ( migrate_Types_GameId_GameId k, migrate_v v ))
                |> Evergreen.V26.Types.GameIdDict.GameIdDict


migrate_Types_GameId_GameId : Evergreen.V1.Types.GameId.GameId -> Evergreen.V26.Types.GameId.GameId
migrate_Types_GameId_GameId (Evergreen.V1.Types.GameId.GameId old) =
    old
        |> Evergreen.V26.Types.GameId.GameId


migrate_Types_ServerData_ServerData : (a_old -> a_new) -> Evergreen.V1.Types.ServerData.ServerData a_old -> Evergreen.V26.Types.ServerData.ServerData a_new
migrate_Types_ServerData_ServerData migrate_a old =
    case old of
        Evergreen.V1.Types.ServerData.Loading ->
            Evergreen.V26.Types.ServerData.Loading

        Evergreen.V1.Types.ServerData.Loaded p0 ->
            Evergreen.V26.Types.ServerData.Loaded (p0 |> migrate_a)


migrate_Types_SessionDict_Client : Evergreen.V1.Types.SessionDict.Client -> Evergreen.V26.Types.SessionDict.Client
migrate_Types_SessionDict_Client old =
    { session = old.session
    , lastSeen = old.lastSeen
    }


migrate_Types_SessionDict_Game : Evergreen.V1.Types.SessionDict.Game -> Evergreen.V26.Types.SessionDict.Game
migrate_Types_SessionDict_Game old =
    { users = Evergreen.V26.Types.UserIdSet.UserIdSet Dict.empty
    , gameData = old.gameData |> migrate_Types_SessionDict_GameData
    }


migrate_Types_SessionDict_GameData : Evergreen.V1.Types.SessionDict.GameData -> Evergreen.V26.Types.SessionDict.GameData
migrate_Types_SessionDict_GameData old =
    case old of
        Evergreen.V1.Types.SessionDict.FateGameData p0 ->
            Evergreen.V26.Types.SessionDict.FateGameData (p0 |> migrate_Types_Fate_GameData)

        Evergreen.V1.Types.SessionDict.WanderhomeGameData p0 ->
            Evergreen.V26.Types.SessionDict.WanderhomeGameData (p0 |> migrate_Types_Wanderhome_GameData)


migrate_Types_SessionDict_SessionDict : Evergreen.V1.Types.SessionDict.SessionDict -> Evergreen.V26.Types.SessionDict.SessionDict
migrate_Types_SessionDict_SessionDict old =
    case old of
        Evergreen.V1.Types.SessionDict.SessionDict p0 ->
            Evergreen.V26.Types.SessionDict.SessionDict
                { sessions = p0.sessions |> Dict.map (\k -> migrate_Types_Session_Session)
                , clients = p0.clients |> Dict.map (\k -> migrate_Types_SessionDict_Client)
                , users = p0.users |> migrate_Types_UserIdDict_UserIdDict migrate_Types_SessionDict_UserData
                , games = p0.games |> migrate_Types_GameIdDict_GameIdDict migrate_Types_SessionDict_Game
                , tokens = p0.tokens |> migrate_Types_TokenDict_TokenDict migrate_Types_UserId_UserId
                }


migrate_Types_SessionDict_UserData : Evergreen.V1.Types.SessionDict.UserData -> Evergreen.V26.Types.SessionDict.UserData
migrate_Types_SessionDict_UserData old =
    { name = old.name
    , fate = old.fate |> migrate_Types_Fate_UserData
    }


migrate_Types_Session_Session : Evergreen.V1.Types.Session.Session -> Evergreen.V26.Types.Session.Session
migrate_Types_Session_Session old =
    { clients = old.clients
    , loggedIn = old.loggedIn |> Maybe.map migrate_Types_UserId_UserId
    , lastSeen = old.lastSeen
    }


migrate_Types_TokenDict_TokenDict : (v_old -> v_new) -> Evergreen.V1.Types.TokenDict.TokenDict v_old -> Evergreen.V26.Types.TokenDict.TokenDict v_new
migrate_Types_TokenDict_TokenDict migrate_v old =
    case old of
        Evergreen.V1.Types.TokenDict.TokenDict p0 ->
            p0
                |> Dict.map
                    (\_ ( k, v ) -> ( migrate_Types_Token_Token k, migrate_v v ))
                |> Evergreen.V26.Types.TokenDict.TokenDict


migrate_Types_Token_Token : Evergreen.V1.Types.Token.Token -> Evergreen.V26.Types.Token.Token
migrate_Types_Token_Token old =
    case old of
        Evergreen.V1.Types.Token.Token p0 ->
            Evergreen.V26.Types.Token.Token p0


migrate_Types_UserIdDict_UserIdDict : (v_old -> v_new) -> Evergreen.V1.Types.UserIdDict.UserIdDict v_old -> Evergreen.V26.Types.UserIdDict.UserIdDict v_new
migrate_Types_UserIdDict_UserIdDict migrate_v old =
    case old of
        Evergreen.V1.Types.UserIdDict.UserIdDict p0 ->
            p0
                |> Dict.map (\_ ( k, v ) -> ( migrate_Types_UserId_UserId k, migrate_v v ))
                |> Evergreen.V26.Types.UserIdDict.UserIdDict


migrate_Types_UserId_UserId : Evergreen.V1.Types.UserId.UserId -> Evergreen.V26.Types.UserId.UserId
migrate_Types_UserId_UserId old =
    case old of
        Evergreen.V1.Types.UserId.UserId p0 ->
            Evergreen.V26.Types.UserId.UserId p0


migrate_Types_Wanderhome_GameData : Evergreen.V1.Types.Wanderhome.GameData -> Evergreen.V26.Types.Wanderhome.GameData
migrate_Types_Wanderhome_GameData old =
    old
